{"type":"Reference","version":"156251caf7bed39b90b263003775f7d9efb574f3","content":"## 2024-07-18 Handwritten Text Recognition using AI\n*Author: @onsetsu*\n\n<script>\nconst normalURL = lively4url + '/demos/stefan/handwritten-text-recognition/eng_bw.png';\nconst scribblyURL = lively4url + '/demos/stefan/handwritten-text-recognition/htr-test.png';\n\nfunction textareaFor(text) {\n  return <textarea style='width: 500px; height: 150px;'>{text}</textarea>\n}\n</script>\n\n### Using OpenAI\n\n<script>\nimport OpenAI from \"demos/openai/openai.js\"\n  \nasync function textFromImageOpenAI(url) {\n  let prompt =  {\n    \"model\": \"gpt-4o\", \n    \"max_tokens\": 500,\n    \"temperature\": 1,\n    \"top_p\": 1,\n    \"n\": 1,\n    \"stream\": false,\n    \"stop\": \"VANILLA\",\n    \"messages\": [\n      { \"role\": \"system\", \"content\": \"You are a system for handwritten text recognition (htr). Given an image, extract the text in it and only answer with this text.\" },\n      { \"role\": \"user\", \"content\":  [\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": url,\n            \"detail\": \"low\" // high\n          }\n        }\n      ]}\n    ]\n  }\n\n  let json = await OpenAI.openAIRequest(prompt).then(r => r.json())\n  return json.choices[0].message.content\n}\n\n</script>\n\n![alt text](http://tesseract.projectnaptha.com/img/eng_bw.png \"Handwritten Text\"){width=400}\n\n<script>\nconst text = await textFromImageOpenAI(normalURL)\ntextareaFor(text)\n</script>\n\n![alt text](./../../../demos/stefan/handwritten-text-recognition/htr-test.png \"Handwritten Text\"){width=400}\n\n<script>\nconst text2 = await textFromImageOpenAI(scribblyURL)\ntextareaFor(text2)\n</script>\n\n### Using the OCR lib tesseract.js\n\n- Good for OCR, not for HTR\n- Has fine-grained feedback on where Words, lines, etc. are\n\n```javascript\nimport { createWorker } from 'https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.min.js'\n\nconst worker = await createWorker('eng');\nconst ret = await worker.recognize(lively4url + '/demos/stefan/htr-test.png');\nawait worker.terminate();\nret.data.text\n```\n\n<script>\nimport { createWorker } from 'https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.min.js'\n\nasync function textFromURL(url) {\n  const worker = await createWorker('eng');\n  const ret = await worker.recognize(url);\n  await worker.terminate();\n  return ret\n}\n</script>\n\nGood for OCR-friendly text:\n\n<script>\nconst ret = await textFromURL(normalURL)\ntextareaFor(ret.data.text)\n</script>\n\nBad for handwritten notes:\n\n<script>\nconst ret = await textFromURL(scribblyURL)\ntextareaFor(ret.data.text)\n</script>\n\n"}
{"from":1552,"to":1552,"name":"color","color":"#9ecae1"}
{"from":1138,"to":1138,"name":"color","color":"#9ecae1"}