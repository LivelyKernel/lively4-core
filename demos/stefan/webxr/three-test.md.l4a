{"type":"Reference","version":"2f86d89402b9000346738ed2ff4ac31ab1153368","content":"![](./turtok.png){id=turtok}\n\n<script>\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\nimport Stats from './../libs/stats/stats.module.js';\n\nimport { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/addons/postprocessing/RenderPass.js';\nimport { GlitchPass } from 'three/addons/postprocessing/GlitchPass.js';\nimport { Clock, MathUtils } from 'three';\n\nimport { NURBSCurve } from 'three/addons/curves/NURBSCurve.js';\nimport { NURBSSurface } from 'three/addons/curves/NURBSSurface.js';\nimport { ParametricGeometry } from 'three/addons/geometries/ParametricGeometry.js';\n\n// text\nimport { FontLoader } from 'three/addons/loaders/FontLoader.js';\nimport { TextGeometry } from 'three/addons/geometries/TextGeometry.js';\n\nimport { ARButton } from \"three/addons/webxr/ARButton.js\";\nARButton\n</script>\n\n<script>\nimport * as THREE from 'three';\n\n\nconst { devicePixelRatio, innerHeight, innerWidth } = window;\n// Create a new WebGL renderer and set the size + pixel ratio.\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true })\nrenderer.setSize(innerWidth, innerHeight);\nrenderer.setPixelRatio(devicePixelRatio);\n  \n// Enable XR functionality on the renderer.\nrenderer.xr.enabled = true;\n\n// Add it to the DOM.\ndocument.body.appendChild( renderer.domElement );\n\n// Create the AR button element, configure our XR session, and append it to the DOM.\nARButton.createButton(\n  renderer,\n  { requiredFeatures: [\"hit-test\"] },\n)\n\n</script>\n\n    <div id='msg' async>hello</div>\n    <button id='btn' onclick='start()'>start webxr</button>\n    <script>\n      document.body.insertAdjacentText('beforeend', 'hello23')\n\n      async function start() {\n        btn.remove()\n        try {\n          const img = document.getElementById('turtok');\n          const imgBitmap = await createImageBitmap(img);\n\n          var a = await navigator.xr.isSessionSupported('inline');\n          var b = await navigator.xr.isSessionSupported('immersive-ar');\n          var c = await navigator.xr.isSessionSupported('immersive-vr');\n\n      document.body.insertAdjacentText('beforeend', 'a: ' + a)\n\n          const session3 = await navigator.xr.requestSession(\"inline\", {\n  // requiredFeatures: [\"depth-sensing\"],\n  // depthSensing: {\n  //   usagePreference: [\"cpu-optimized\", \"gpu-optimized\"],\n  //   dataFormatPreference: [\"luminance-alpha\", \"float32\"],\n  // },\n});\n          \n          \n      document.body.insertAdjacentText('beforeend', 'b')\n\n//           const session = await navigator.xr.requestSession('immersive-ar', {\n//   requiredFeatures: ['image-tracking'],\n//   trackedImages: [\n//     {\n//       image: imgBitmap,\n//       widthInMeters: 0.05\n//     }\n//   ]\n// });\n// session\n\n          msg.innerHTML = 'world' + a + b + c + typeof createImageBitmap;\n        } catch (error) {\n          msg.innerHTML = error;\n        }\n      }\n    </script>\n\n\n\nconst button = ARButton.createButton( renderer, {\n\trequiredFeatures: [ 'image-tracking' ],\n\ttrackedImages: [\n\t\t{\n\t\t\timage: imgBitmap,\n\t\t\twidthInMeters: 0.2\n\t\t}\n\t]\n} );"}
{"from":1542,"to":1542,"name":"color","color":"#9ecae1"}