{"type":"Reference","version":"6ea9184204ffc61f568daccfc886a24f6c290bbb","content":"export default function({ types: t, template, traverse, }) {\n\n\n  /* Generic Signal Computation One Time per File */\n  var setup = template(`\nvar aexprCallbacks = [],\n    signals = [],\n    solveSignals = false,\n    resolveSignals = function() {\n        if(!solveSignals) {\n            solveSignals = true;\n            signals.forEach(s => s());\n            solveSignals = false;\n            let nonSignalCB;\n            while(nonSignalCB = aexprCallbacks.pop()) {\n                nonSignalCB();\n            }\n}\n    },\n    newAExpr = function(axp) {\n        return {\n            onChange(cb) {\n                axp.onChange(val => {\n                    if(solveSignals) {\n                        aexprCallbacks.push(() => cb(axp.getCurrentValue()));\n                    } else {\n                        return cb(val);\n                    }\n                });\n            }\n        }\n    }\n`);\n\n  /* Replace assignemnt with Signal */\n  var signal = template(`(aexpr(() => init).onChange(resolveSignals), signals.push(() => name = init), init)`);\n\n\n  /* Find Assginemnts and Instrument Assigments */\n  return {\n    visitor: {\n      Program(program) {\n        let aexprs = new Set();\n        program.traverse({\n          CallExpression(path) {\n            let callee = path.get(\"callee\");\n            if (callee.isIdentifier() && callee.node.name === 'aexpr')\n              aexprs.add(path);\n          }\n        });\n        aexprs.forEach(path => path.replaceWith(template(`newAExpr(expr)`)({ expr: path.node })));\n\n        program.traverse({\n          Identifier(path) {\n            if (!path.parentPath.isVariableDeclarator()) { return; }\n\n            // const as substitute for 'signal' for now #TODO\n            var declaration = path.parentPath.parentPath.node;\n            if (declaration.kind !== 'const') { return; }\n            declaration.kind = 'let';\n\n            var init = path.parentPath.get('init');\n            init.replaceWith(signal({\n              init: init,\n              name: path.node\n            }).expression);\n          }\n        });\n\n        program.unshiftContainer(\"body\", setup());\n      }\n    }\n  };\n}\n"}
{"from":958,"to":1000,"name":"color","color":"#fdd49e"}
{"from":1002,"to":1039,"name":"color","color":"#a1d99b"}
{"from":934,"to":955,"name":"color","color":"#fdd49e"}
{"from":1520,"to":2057,"name":"color","color":"#fdd49e"}
{"from":2067,"to":2109,"name":"color","color":"#a1d99b"}
{"from":1420,"to":1511,"name":"color","color":"#a1d99b"}
{"from":1156,"to":1411,"name":"color","color":"#a1d99b"}
{"from":1099,"to":1147,"name":"color","color":"#fdd49e"}
{"from":0,"to":61,"name":"color","color":"#fdd49e"}
{"from":118,"to":127,"name":"color","color":"#a1d99b"}
{"from":130,"to":138,"name":"color","color":"#a1d99b"}
{"from":127,"to":130,"name":"color","color":"#a1d99b"}