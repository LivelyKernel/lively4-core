{"type":"Reference","version":"f19d611c1bf86d8653d770aa7039219ab13a4ae7","content":"\"enable aexpr\";\n\nimport Morph from 'src/components/widgets/lively-morph.js';\n\nexport class Track {\n\n  // events\n  static get events() {\n    if (!self.__events__) {\n      self.__events__ = [];\n    }\n\n    return self.__events__;\n  }\n  static clearE() {\n    this.events.length = 0;\n  }\n  static logE() {}\n\n  // promises\n  static get promises() {\n    if (!self.__promises__) {\n      self.__promises__ = new Set();\n    }\n\n    return self.__promises__;\n  }\n  static update() {}\n  static ensureID(thing, store) {\n    if (!self[store]) {\n      self[store] = 1;\n    }\n    if (!thing.id) {\n      thing.id = self[store]++;\n    }\n    return thing.id;\n  }\n  static id(thing) {\n    return this.printID(thing)\n  }\n  static printID(thing) {\n    if (!thing) {\n      return;\n    }\n    if (thing instanceof self.Promise || thing instanceof self.OriginalPromise) {\n      return 'P' + this.ensureID(thing, '__promise_id__')\n    }\n    if (thing instanceof Function) {\n      return 'F' + this.ensureID(thing, '__function_id__')\n    }\n    \n    return undefined;\n  }\n  // get print id\n  static pid(prom) {\n    return this.printID(prom)\n  }\n  static fid(fn) {\n    return this.printID(fn)\n  }\n\n}\n\nexport default class PromiseVisualizer extends Morph {\n  get list() {\n    return this.get(\"#promiseList\");\n  }\n  get numEvt() {\n    return this.get(\"#numEvt\");\n  }\n  get numProm() {\n    return this.get(\"#numProm\");\n  }\n  get promiseArea() {\n    return this.get(\"#promiseArea\");\n  }\n\n  async initialize() {\n    this.windowTitle = \"PromiseVisualizer\";\n\n    this.registerButtons();\n    lively.html.registerKeys(this);\n\n    this.throttledUpdate = ((...args) => this.update(...args)).throttle(7000);\n  }\n\n  update() {\n    this.numEvt.innerHTML = Track.events.length;\n    this.numProm.innerHTML = Track.promises.size;\n    this.renderEvents();\n  }\n\n  renderEvents() {\n    this.list.innerHTML = '';\n    this.list.innerHTML = Track.events.map(e => {\n      const msg = e.msg\n        .replace(/new Promise/gm, `<span class=\"Method\">new</span> Promise`)\n        .replace(/Promise\\.([a-zA-Z0-9$_]+)\\(/gm, `Promise.<span class=\"Method\">$1</span>(`)\n        .replace(/(P\\d+)\\.([a-zA-Z0-9$_]+)/gm, `$1.<span class=\"Method\">$2</span>`)\n        .replace(/(P\\d+)/gm, `<span class=\"Promise $1\" onmouseover=\"\nvar parents = lively.allParents(this, undefined, true)\nvar viewer = parents.find(e => e && e.tagName === 'PROMISE-VISUALIZER');\nif (viewer) {\n  viewer.highlightPromise('$1')\n}\n\">$1</span>`);\n\n      function printFrame(frame) {\n        //if(frame.func === 'example2') {debugger}\n        const isAsync = frame.async ? 'ðŸ¦“' : '';\n        const func = isAsync + frame.func;\n        if (!frame.file) {\n          return func\n        } else {\n          let file = frame.file\n            .replace(/^workspace.*$/, 'workspace')\n            .replace(/.*\\//, '')\n          return func + '@' + file\n        }\n      }\n      let usefulFrame = e.stack.getFrames(2)\n        .filter(f => !f.file || !f.file.includes(\"active-expression-rewriting.js\"))\n        .filter(f => !f.file || !f.file.includes(\"Layers.js\"))\n        .filter(f => !f.func || !f.func.includes(\".layered ReplayLayerActivationsLayer\"))\n        .map(printFrame)\n        [0];\n      if (!usefulFrame) {\n        usefulFrame = '&lt;no frame>'\n      }\n      const entry = `E${e.id}: ${msg} (${usefulFrame})`\n        .replace(/(example\\d+)/gm, `<span class=\"Example\">$1</span>`);\n      return `<div class=\"eventEntry\">${entry}</div>`;\n    }).join('\\n');\n  }\n\n  get highlightPromiseStyle() {\n    return this.get('#highlight-promise');\n  }\n  highlightPromise(pid) {\n    this.highlightPromiseStyle.innerHTML = `\n  #promiseList .Promise.${pid} {\n    background-color: steelblue;\n  }\n`;\n  }\n\n  renderPromises() {\n    this.promiseArea.innerHTML = '';\n    Track.promises.forEach(e => this.promiseArea.innerHTML += `<div>${e}</div>`);\n  }\n\n  // this method is autmatically registered through the ``registerKeys`` method\n  onKeyDown(evt) {\n    lively.notify(\"Key Down!\" + evt.charCode);\n  }\n\n  onClearButton() {\n    Track.clearE();\n    this.update();\n  }\n\n  onUpdateButton() {\n    this.update();\n  }\n\n  /* Lively-specific API */\n\n  // store something that would be lost\n  livelyPrepareSave() {}\n\n  livelyPreMigrate() {\n    // is called on the old object before the migration\n  }\n\n  livelyMigrate(other) {\n    this.update();\n  }\n\n  livelyInspect(contentNode, inspector) {\n    // do nothing\n  }\n\n  async livelyExample() {\n    this.update();\n  }\n\n}"}