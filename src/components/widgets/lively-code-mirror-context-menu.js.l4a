{"type":"Reference","version":"96c12edb6cf8db2fa65783aac87327d17261d16c","content":"import ContextMenu from 'src/client/contextmenu.js';\n\nexport default async function openMenu(astCapabilities, codeMirror, livelyCodeMirror) {\n\n  function fa(name, ...modifiers) {\n    return `<i class=\"fa fa-${name} ${modifiers.map(m => 'fa-' + m).join(' ')}\"></i>`;\n  }\n  \n  /*MD ### Generate Submenus MD*/\n\n  async function generateGenerationSubmenu() {\n\n    // for now, classes can be generated everywhere\n    // if this isn't wanted anymore, scope checks can be done as can be seen below\n    let submenu = [['Class', () => {\n        menu.remove();\n        astCapabilities.generateClass();\n      }, '→', fa('suitcase')]];\n\n    const selectedPath = astCapabilities.getInnermostPathContainingSelection(astCapabilities.programPath, astCapabilities.firstSelection);\n    \n    //add testcase if in describe\n    if (astCapabilities.isInDescribe(selectedPath)) {\n      submenu.unshift(['Testcase', () => {\n        menu.remove();\n        astCapabilities.generateTestCase();\n      }, '→', fa('suitcase')]);\n    }\n    \n    //add getter / setter if directly in ClassBody or ObjectExpression\n    if (astCapabilities.isDirectlyIn([\"ClassBody\", \"ObjectExpression\"], selectedPath)) {\n      submenu.push(['Getter', () => {\n        menu.remove();\n        astCapabilities.generateGetter();\n      }, '→', fa('suitcase')], ['Setter', () => {\n        menu.remove();\n        astCapabilities.generateSetter();\n      }, '→', fa('suitcase')]);\n    }\n\n    return submenu;\n  }\n\n  async function generateImportSubmenu() {\n    let { identName, functions, classes } = await astCapabilities.findImports();\n    let submenu = [];\n    if (!identName || functions.length == 0 && classes.length == 0) {\n      submenu.push(['none', () => {\n        menu.remove();\n      }, '', '']);\n    } else {\n      functions.forEach(url => submenu.push([url.replace(lively4url, ''), () => {\n        menu.remove();\n        astCapabilities.addImport(url, identName, true);\n      }, '-', fa('share-square-o')]));\n      classes.forEach(cl => submenu.push([cl.name + \", \" + cl.url.replace(lively4url, ''), () => {\n        menu.remove();\n        astCapabilities.addImport(cl.url, cl.name, false);\n      }, '-', fa('share-square-o')]));\n    }\n    return submenu;\n  }\n\n  /*MD ### Generate Factoring Menu MD*/\n\n  const menuItems = [['selection to local variable', () => {\n    menu.remove();\n    astCapabilities.extractExpressionIntoLocalVariable();\n  }, '→', fa('share-square-o', 'flip-horizontal')], ['inline variable', () => {\n    menu.remove();\n    astCapabilities.inlineLocalVariable();\n  }, '→', fa('external-link', 'flip-vertical')], ['wrap into active expression', () => {\n    menu.remove();\n    astCapabilities.wrapExpressionIntoActiveExpression();\n  }, '→', fa('suitcase')], ['Rename', () => {\n    menu.remove();\n    astCapabilities.rename();\n  }, '→', fa('suitcase')], ['Swap then and else of conditional', () => {\n    menu.remove();\n    astCapabilities.rename();\n  }, 'swap', fa('suitcase')], ['Extract Method', () => {\n    menu.remove();\n    astCapabilities.swapConditional()\n  }, 'Alt+M', fa('suitcase'), {\n    onSelect: () => {\n      const selection = astCapabilities.selectMethodExtraction(astCapabilities.programPath, true);\n      if (selection) {\n        openMenu.changedSelectionInMenu = true;\n        astCapabilities.selectPaths(selection.selectedPaths);\n      } else {\n        openMenu.changedSelectionInMenu = false;\n      }\n    },\n    onDeselect: () => {\n      if (openMenu.changedSelectionInMenu) {\n        codeMirror.undoSelection();\n      }\n    }}], ['Generate HTML Accessors', () => {\n      menu.remove();\n      astCapabilities.generateHTMLAccessors();\n    }, 'Alt+H', fa('suitcase')],\n                     ['Print References', () => {\n                       astCapabilities.printAllBindings();\n                       menu.remove();\n                     }, 'Alt+I', fa('suitcase')],\n                     [\n                       'lively', [['lively.notify', () => {\n                         menu.remove();\n                         astCapabilities.livelyNotify();\n                       }, '+', fa('plus')],\n                                  ['lively4url', () => {\n                                    menu.remove();\n                                    astCapabilities.lively4url();\n                                  }, '+', fa('plus')],\n                                 ]],\n                     ['Generate', generateGenerationSubmenu()], ['Import', generateImportSubmenu()]];\n  var menuPosition = codeMirror.cursorCoords(false, \"window\");\n\n  const menu = await ContextMenu.openIn(document.body, { clientX: menuPosition.left, clientY: menuPosition.bottom }, undefined, document.body, menuItems);\n  menu.addEventListener(\"DOMNodeRemoved\", () => {\n    livelyCodeMirror.focus();\n  });\n}\n"}