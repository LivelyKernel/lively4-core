{"type":"Reference","version":"8f9bb650ccdeadcf6f29b7817b7da6a70e773de0","content":"/*MD\n  ![](https://lively-kernel.org/lively4/lively4-core/demos/lively-simulation/screenshots/controller.png){width=500px}\nMD*/\n\n\"enable aexpr\";\n\nimport Morph from 'src/components/widgets/lively-morph.js';\nimport _ from 'src/external/lodash/lodash.js';\n\nexport default class LivelySimulationController extends Morph {\n  \n  // life cycle\n  initialize() {\n    this.initializeStartStopButton();\n    this.initializeStepButton();\n    this.initializeAppendCellButton();\n    this.initializeVelocitySlider();\n    this.initializeRevertSelect();\n    this.initializeStopOnErrorCheckBox();\n    this.initializeResetTimeButton();\n    this.initializeTimeDeltaInput();\n  }\n  \n  initializeStartStopButton() {\n    const startStopButton = this.get('#startStopButton');\n    startStopButton.addEventListener('click', () => this.onStartStopButton());\n  }\n  \n  initializeStepButton() {\n    const stepButton = this.get('#stepButton');\n    stepButton.addEventListener('click', () => this.onStepButton());\n  }\n  \n  initializeAppendCellButton() {\n    const appendCellButton = this.get('#appendCellButton');\n    appendCellButton.addEventListener('click', (event) => this.onAppendCellButton(event));\n  }\n  \n  initializeVelocitySlider() {\n    const velocitySlider = this.get('#velocitySlider');\n    velocitySlider.addEventListener('input', (event) => this.onVelocitySlider(event));\n  }\n  \n  initializeRevertSelect() {\n    const revertSelect = this.get('#revertSelect');\n    revertSelect.addEventListener('click', () => this.onRevertSelect());\n    revertSelect.addEventListener('change', (event) => this.onRevertSelectChange(event));\n  }\n  \n  initializeStopOnErrorCheckBox() {\n    const stopOnErrorCheckBox = this.get('#stopOnErrorCheckBox');\n    stopOnErrorCheckBox.addEventListener('change', ({ target: { checked: stopOnError }}) => this.onStopOnError(stopOnError))\n  }\n  \n  initializeResetTimeButton() {\n    const resetTimeButton = this.get('#resetTime');\n    resetTimeButton.addEventListener('click', () => this.handleResetTime());\n  }\n  \n  initializeTimeDeltaInput() {\n    const timeDeltaInput = this.get('#dt');\n    timeDeltaInput.addEventListener('change', ({ target: { value: timeDelta }}) => this.handleTimeDelta(timeDelta));\n  }\n  \n  initializeEngine(engine) {\n    this.registerIsRunningUpdater(engine);\n    this.registerVelocityUpdater(engine);\n    this.registerStopOnErrorUpdater(engine);\n    this.registerTimeUpdater(engine);\n    this.registerTimeDeltaUpdater(engine);\n  }\n  \n  detachedCallback() {\n    if (this.isRunningUpdater) this.isRunningUpdater.dispose();\n    if (this.velocityUpdater) this.velocityUpdater.dispose();\n    if (this.stopOnErrorUpdater) this.stopOnErrorUpdater.dispose();\n    if (this.timeUpdater) this.timeUpdater.dispose();\n    if (this.timeDeltaUpdater) this.timeDeltaUpdater.dispose();\n  }\n  \n  registerIsRunningUpdater(engine) {\n    this.isRunningUpdater = aexpr(() => engine.isRunning).dataflow(isRunning => {\n      const startStopButton = this.get('#startStopButton');\n      startStopButton.textContent = isRunning ? 'Stop' : 'Start';\n      if (isRunning) startStopButton.classList.add('stop');\n      else startStopButton.classList.remove('stop');\n    });\n  }\n  \n  registerVelocityUpdater(engine) {\n    this.velocityUpdater = aexpr(() => engine.velocity).dataflow(velocity => {\n      const velocitySlider = this.get('#velocitySlider');\n      velocitySlider.value = velocity;\n      const velocitySpan = this.get('#velocitySpan');\n      velocitySpan.innerText = velocity;\n    });\n  }\n  \n  registerStopOnErrorUpdater(engine) {\n    this.stopOnErrorUpdater = aexpr(() => engine.stopOnError).dataflow(stopOnError => {\n      const stopOnErrorCheckBox = this.get('#stopOnErrorCheckBox');\n      stopOnErrorCheckBox.checked = stopOnError;\n    });\n  }\n  \n  registerTimeUpdater(engine) {\n    this.timeUpdater = aexpr(() => engine.time).dataflow(time => {\n      const timeSpan = this.get('#time');\n      timeSpan.innerText = time;\n    });\n  }\n  \n  registerTimeDeltaUpdater(engine) {\n    this.timeDeltaUpdater = aexpr(() => engine.timeDeltaPerStepInSeconds).dataflow(dt => {\n      const dtInput = this.get('#dt');\n      dtInput.value = dt;\n    });\n  }\n  \n  // event listener\n  onStartStopButton() {\n    const engine = this.getEngine();\n    if (!engine) return;\n    engine.toggleStartStop();\n  }\n  \n  onStepButton() {\n    const engine = this.getEngine();\n    if (!engine) return;\n    engine.step();\n  }\n  \n  onAppendCellButton(event) {\n    const simulation = this.getSimulation();\n    if (simulation && simulation.addCell) simulation.addCell(event);\n  }\n  \n  onVelocitySlider({ target: { value: velocity } }) {\n    const engine = this.getEngine();\n    if (!engine) return;\n    engine.setVelocity(velocity);\n  }\n  \n  onRevertSelect() {\n    const revertSelect = this.get('#revertSelect');\n    const options = this.generateCheckpointOptions();\n    this.resetRevertSelect();\n    _.forEach(options, option => revertSelect.appendChild(option));\n  }\n  \n  onRevertSelectChange({ target: { value: snapshot } }){\n    const simulation = this.getSimulation();\n    if (simulation && simulation.revert) simulation.revert(snapshot);\n    this.resetRevertSelect();\n  }\n  \n  onStopOnError(stopOnError) {\n    const engine = this.getEngine();\n    if (!engine) return;\n    engine.stopOnError = stopOnError;\n  }\n  \n  handleResetTime() {\n    const simulation = this.getSimulation();\n    if (!simulation.reset) return;\n    simulation.reset();\n  }\n  \n  handleTimeDelta(timeDelta) {\n    const engine = this.getEngine();\n    if (!engine) return;\n    try {\n      engine.setTimeDeltaPerStepInSeconds(parseFloat(timeDelta));\n    } catch (e) { /* ignore */ }\n  }\n  \n  // other\n  resetRevertSelect() {\n    const revertSelect = this.get('#revertSelect');\n    const { children } = revertSelect;\n    const checkpointOptions = _.takeRight(children, children.length - 1);\n    _.forEach(checkpointOptions, child => child.remove());\n    revertSelect.value = '';\n  }\n  \n  generateCheckpointOptions() {\n    const history = _.filter(this.getHistory());\n    return _.map(history, ({ snapshot, timestamp }) => (\n      <option value={snapshot}>\n        { timestamp }\n      </option>\n    ));\n  }\n  \n  get(selector) {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector(selector);\n  }\n  \n  getSimulation() {\n    return this.getRootNode().host;\n  }\n  \n  getEngine() {\n    const simulation = this.getSimulation();\n    return simulation && simulation.getEngine && simulation.getEngine();\n  }\n  \n  getHistory() {\n    const simulation = this.getSimulation();\n    return simulation && simulation.getHistory && simulation.getHistory();\n  }\n  \n  isFocused() {\n    return this.isChildFocused(this.get('#dt'));\n  }\n  \n  isChildFocused(child, doc = document) {\n    if (doc.activeElement === child) return true;\n    if (doc.activeElement && doc.activeElement.shadowRoot)\n\t\t\treturn this.isChildFocused(child, doc.activeElement.shadowRoot)\n    return false;\n  }\n}"}