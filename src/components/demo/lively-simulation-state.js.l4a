{"type":"Reference","version":"ab4bbaa6d9bdf1ed16058c4b4987f91f53120c35","content":"\"enable aexpr\";\n\nimport Morph from 'src/components/widgets/lively-morph.js';\nimport _ from 'src/external/lodash/lodash.js';\n\nconst DEFAULT_STATE = '{}';\n\nexport default class LivelySimulationState extends Morph {\n\n  constructor() {\n    super();\n    this.state = DEFAULT_STATE;\n  }\n  \n  // life cycle\n  initialize() {\n    this.initializeEntries();\n    this.initializeSaveDiscard();\n  }\n  \n  initializeEntries() {\n    const entries = this.get('#entries');\n    entries.addEventListener('focusin', () => this.handleFocusIn());\n  }\n\n  initializeState(state = DEFAULT_STATE) {\n    this.isEditing = false;\n    this.setStateFromJSON(state);\n  }\n\n  initializeSaveDiscard() {\n    const save = this.get('#save');\n    save.addEventListener('click', () => this.handleSaveDiscard(true));\n    const discard = this.get('#discard');\n    discard.addEventListener('click', () => this.handleSaveDiscard(false));\n  }\n\n  // event listener\n  handleFocusIn() {\n    if (!this.isEditing) {\n      this.isEditing = true;\n      this.checkpoint = this.entriesToStateJSON();\n      this.get('#saveDiscard').classList.add('show');\n      this.get('#entries').classList.add('edit');\n    }\n  }\n\n  handleSaveDiscard(save) {\n    this.get('#saveDiscard').classList.remove('show');\n    this.get('#entries').classList.remove('edit');\n    this.isEditing = false;\n    if (save) this.save();\n    else this.discard();\n  }\n  \n  handleDelete(entry) {\n    entry.remove();\n    if (!this.hasEmptyEntry()) this.addEmptyEntry();\n  }\n\n  // other\n  save() {\n    try {\n      this.setState(this.entriesToState());\n      const codeView = this.getCodeView();\n      if (codeView && codeView.preCompile) codeView.preCompile(); \n      this.clearError();\n    } catch ({ message }) {\n      this.setError(message);\n    }\n  }\n\n  discard() {\n    this.setStateFromJSON(this.checkpoint);\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  get(selector) {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector(selector);\n  }\n\n  setState(state) {\n    const stateWithUnits = _.mapValues(state, (entry, key) => ({\n      unit: _.isObject(entry) ? _.get(entry, 'unit', '') : this.state[key] && this.state[key].unit || '',\n      value: _.isObject(entry) ? _.get(entry, 'value', 0) : entry\n    }));\n    this.state = stateWithUnits;\n    if (this.isEditing) return;\n    this.updateEntries();\n  }\n\n  setStateFromJSON(json) {\n    const state = JSON.parse(json);\n    this.setState(state);\n  }\n\n  setError(error) {\n    const status = this.get('#status');\n    status.innerText = error;\n    status.classList.add('error');\n  }\n\n  clearError() {\n    const status = this.get('#status');\n    status.innerText = '';\n    status.classList.remove('error');\n  }\n\n  isFocused() {\n    const { shadowRoot } = this;\n    return _.some(shadowRoot.querySelectorAll('input'), input => this.isChildFocused(input));\n  }\n\n  isChildFocused(child, doc = document) {\n    if (doc.activeElement === child) return true;\n    if (doc.activeElement && doc.activeElement.shadowRoot)\n\t\t\treturn this.isChildFocused(child, doc.activeElement.shadowRoot)\n    return false;\n  }\n  \n  entriesToState() {\n    const json = this.entriesToStateJSON();\n    return json && JSON.parse(json);\n  }\n  \n  entriesToStateJSON() {\n    const entries = _.map([...this.get('#entries').children], entry => ([\n      entry.getKey(), \n      {\n        value: isNaN(entry.getValue()) ? entry.getValue() : parseFloat(entry.getValue()),\n        unit: entry.getUnit()\n      }\n    ]));\n    const filteredEntries = _.reject(entries, ([ key ]) => _.isEmpty(key.trim()));\n    const entriesAsJson = _.map(filteredEntries, (entry) => JSON.stringify(_.fromPairs([entry])).slice(1, -1));\n    return `{\n      ${\n        _.join(entriesAsJson, ',\\n')\n      }\n    }`;\n  }\n  \n  updateEntries() {\n    const { state } = this;\n    const entriesState = this.entriesToState();\n    if (_.isEqual(state, entriesState) && this.hasEmptyEntry()) return;\n    if (_.isEqual(_.keys(state), _.keys(entriesState))) this.updateEntryValues();\n    else this.replaceEntries();\n  }\n  \n  updateEntryValues() {\n    const { state } = this;\n    if (_.isEqual(state, {})) return this.addEmptyEntry();\n    const entries = _.reject([...this.get('#entries').children], entry => _.isEmpty(entry.getKey().trim()));\n    _.forEach(entries, entry => {\n      const value = state[entry.getKey()].value;\n      entry.setValue(isNaN(value) ? value : parseFloat(value.toFixed(3)));\n    });\n    this.ensureEmpty();\n  }\n  \n  replaceEntries() {\n    const { state } = this;\n    const entries = this.get('#entries');\n    entries.innerHTML = ''; // no diffing, just plain remove all + add\n    const newEntries = _.map(_.toPairs(state), ([key, { unit, value }]) => this.createEntry(key, isNaN(value) ? value : parseFloat(value.toFixed(3)), unit));\n    _.forEach(newEntries, (entry) => entries.appendChild(entry));\n    this.addEmptyEntry();\n  }\n  \n  hasEmptyEntry() {\n    return _.some([...this.get('#entries').children], entry => _.isEmpty(entry.getKey().trim()) && _.isEmpty(entry.getValue().trim()));\n  }\n  \n  addEmptyEntry() {\n    const entries = this.get('#entries');\n    entries.appendChild(this.createEntry('', '', ''));\n  }\n  \n  ensureEmpty(entry) {\n    if (!this.hasEmptyEntry()) this.addEmptyEntry();\n    if (entry) entry.focus();\n  }\n  \n  createEntry(key, value, unit) {\n    const entry = (\n      <div class='entry'>\n        <input value={String(key)} placeholder='Name' />\n        <input value={String(value)} placeholder='Value' />\n        <input value={String(unit)} placeholder='Unit' />\n        <i class=\"fa fa-times\"></i>\n      </div>\n    );\n    entry.children[0].addEventListener('input', () => this.ensureEmpty(entry));\n    entry.children[1].addEventListener('input', () => this.ensureEmpty(entry));\n    entry.children[2].addEventListener('input', () => this.ensureEmpty(entry));\n    entry.children[3].addEventListener('mousedown', () => this.handleDelete(entry));\n    entry.getKey = () => entry.children[0].value;\n    entry.getValue = () => entry.children[1].value;\n    entry.getUnit = () => entry.children[2].value;\n    entry.setValue = (value) => entry.children[1].value = value;\n    return entry;\n  }\n  \n  getCodeView() {\n    return this.getRootNode().host;\n  }\n}\n"}