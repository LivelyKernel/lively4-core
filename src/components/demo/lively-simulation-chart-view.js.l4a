{"type":"Reference","version":"6ed70c39ff377879caf88127c6cb9a3d7714dc60","content":"/*MD\n  ![](https://lively-kernel.org/lively4/lively4-core/demos/lively-simulation/screenshots/chart-view.png){width=500px}\nMD*/\n\n\"enable aexpr\";\n\nimport Morph from 'src/components/widgets/lively-morph.js';\nimport _ from 'src/external/lodash/lodash.js';\nimport Chart from 'src/external/chart.js';\nimport 'src/external/chartjs-plugin-colorschemes.js';\n\nexport default class LivelySimulationChartView extends Morph {\n  \n  // life cycle\n  initialize() {\n    const ctx = this.get('#chart').getContext('2d');\n    this.chart = new Chart(ctx, {\n      type: 'scatter',\n      options: {\n        animation: {\n            duration: 0 // general animation time\n        },\n        elements: {\n            line: {\n                tension: 0 // disables bezier curves\n            }\n        },\n        hover: {\n            animationDuration: 0 // duration of animations when hovering an item\n        },\n        maintainAspectRatio: false,\n        plugins: {\n          colorschemes: {\n            scheme: 'office.Office6'\n          }\n        },\n        responsive: true,\n        responsiveAnimationDuration: 0, // animation duration after a resize\n        scales: {\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Time in ms'\n            },\n            type: 'linear',\n          }],\n          yAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Value'\n            }\n          }]\n        },\n        showLines: false\n      }\n    });\n  }\n  \n  attachedCallback() {\n    this.registerVisibilityUpdater();\n  }\n  \n  detachedCallback() {\n    this.visibilityUpdater.dispose();\n  }\n  \n  registerVisibilityUpdater() {\n    this.visibilityUpdater = aexpr(() => this.classList.contains('active')).onChange((isActive) => isActive && this.chart.update());\n  }\n  \n  // other\n  append(timestamp, entry) {\n    const { chart } = this;\n    const keyedDatasets = _.keyBy(chart.data.datasets, 'label');\n    const newDatasets = _.difference(_.keys(entry), _.keys(keyedDatasets));\n    _.forEach(_.toPairs(keyedDatasets), ([label, dataset]) => dataset.data.push({\n      x: timestamp,\n      y: entry[label].value\n    }));\n    _.forEach(newDatasets, label => \n      chart.data.datasets.push({\n        label,\n        data: [{ x: timestamp, y: entry[label].value }]\n      }));\n    if (this.classList.contains('active')) chart.update(0);\n  }\n  \n  reset() {\n    const { chart } = this;\n    chart.data.datasets = [];\n    chart.data.labels = [];\n    chart.update();\n  }\n  \n  get(selector) {\n    const { shadowRoot } = this;\n    return shadowRoot.querySelector(selector);\n  }\n}"}