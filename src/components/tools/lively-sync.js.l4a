{"type":"Reference","version":"81f55a5c302e1f6ff3b4c4f91c47a687ec00ee14","content":"import Morph from 'src/components/widgets/lively-morph.js';\nimport Filter from \"src/external/ansi-to-html.js\";\nimport Strings from \"src/client/strings.js\";\n\n\n/*MD # Github Sync Tool\n![](lively-sync.png){width=500px}\n\nMD*/\n\n\n\n\nexport default class Sync extends Morph {\n  \n  \n  initialize() {\n    var container = this.get(\".container\");\n    this.registerButtons();\n    lively.html.registerInputs(this);\n    lively.html.registerKeys(this);\n    \n    this.updateLoginStatus();\n    \n    if (window.__karma__) {\n      console.log(\"exit early... due to karma\");\n      return;\n    }\n    var repo = this.getAttribute(\"gitrepository\") || lively4url.replace(/.*\\//,\"\")\n    this.get('#gitrepository').value = repo;\n    this.get('#gitrepository').addEventListener(\"change\", evt => this.onGitrepositoryInputChange(evt))\n    this.get('#serverUrl').addEventListener(\"change\", evt => this.onServerUrlInputChange(evt))\n    \n    \n    var travis = this.get(\"#travisLink\");\n    travis.onclick = () => {\n      window.open(travis.getAttribute(\"href\"));\n      return false;\n    };\n    this.updateWindowTitle()\n    this.updateServerURL()\n  }\n\n  onKeyDown(evt) {\n    const char = String.fromCharCode(evt.keyCode || evt.charCode);\n    const ctrl = evt.ctrlKey || evt.metaKey;\n\n    if (evt.repeated) {\n      lively.notify(\"Key rep! \" + char)\n      return;\n    }\n    if (!ctrl) { return; }\n    \n    if (char === \"S\") {\n      this.onSyncButton();\n      evt.preventDefault();\n      evt.stopPropagation();\n      return;\n    }\n\n    if(char === \"Q\") {\n      this.onSquashButton();\n    \n      evt.stopPropagation();\n      evt.preventDefault();\n      return;\n    }\n  }\n  \n  log(s) {\n    this.get(\"#log\").innerHTML += s\n    // var editor = this.get(\"#log\").editor;\n    // if (editor) {\n    //   editor.setValue(editor.getValue() + \"\\n\" + s);\n    //   // editor.session.setScrollTop(1000000); // #TODO find scroll to bottom method in ace\n    // }\n  }\n  \n  async loadCredentials() {\n    // this.updateLoginStatus()\n    var token = await this.loadValue(\"githubToken\")\n    this.get(\"#loginButton\").innerHTML = \n        token ? \"logout\" : \"login\";\n    var login = token ? true : false;\n    this.loggedin = login;\n\n    this.get(\"#gitusername\").value = \n      await this.loadValue(\"githubUsername\");\n    this.get(\"#gitemail\").value = \n      await this.loadValue(\"githubEmail\");\n    \n    var value = await this.loadValue(\"githubRepository\") \n    if (value) this.get(\"#gitrepository\").value = value;\n  }\n  \n\n\n  githubApi(path, token) {\n    return fetch(\"https://api.github.com\" + path, {headers: new Headers({\n      Authorization: \"token \" + token\n    })}).then(r => r.json());\n  }\n  \n  async login() {\n    this.loadValue(\"githubToken\").then((result) => {\n      if (result) return result;\n      return new Promise((resolve, reject) => {\n        lively.authGithub.challengeForAuth(Date.now(), async (token) => {\n          console.log(\"authenticated\");\n          var user = await this.githubApi(\"/user\", token);\n          var username = user.login;\n          var emails =  await this.githubApi(\"/user/emails\", token);\n          var email = emails.find(ea => ea.primary).email;\n\n          console.log(\"username: \" + username);\n          console.log(\"email: \" + email);\n\n          \n          this.storeValue(\"githubUsername\", username);\n          this.storeValue(\"githubEmail\", email);\n          this.storeValue(\"githubToken\", token);\n          this.updateLoginStatus();\n          resolve(token);\n    });\n      });\n    }).then((token) => {\n      this.log(\"Logged in\");\n    });\n  }\n  \n  \n  /*MD ## Sync  MD*/\n  \n\n  async gitControl(cmd, eachCB, optHeaders={}) {\n    this.clearLog()\n    return new Promise(async (resolve) => {\n      var headers =  await this.getHeaders()\n      for(var key in optHeaders) {\n        headers.set(key, optHeaders[key])\n      }\n      let commandURL = this.getServerURL() +\"/_git/\" + cmd;\n      lively.files.fetchChunks(fetch(commandURL, {\n              headers: headers\n            }), (eaChunk) => {\n          if (eachCB) \n            eachCB(eaChunk)\n          else\n            this.log(this.linkifyFiles(new Filter().toHtml(eaChunk.replace(/</g,\"&lt;\"))))\n        }, resolve)\n    })\n  }\n  \n  async sync() {\n    var syncResult = await this.gitControl(\"sync\");\n    \n    this.log(\"invalidate local caches\")\n    window.lively4invalidateFileCaches && window.lively4invalidateFileCaches() // global variable set in boot\n  }\n\n  logout() {\n    this.clearLog()\n    this.storeValue(\"githubToken\", null)\n    this.storeValue(\"githubUsername\", null)\n    this.storeValue(\"githubEmail\", null)\n    this.updateLoginStatus()\n    window.lively4github = null // used by #Fetch proxy\n    this.log(\"\")\n  }\n\n  /*MD ## Getter / Setter MD*/\n  \n  get storagePrefix() {\n    return \"LivelySync_\"\n  }\n  \n  get repositoryBlacklist() {\n    return [\"lively4-core\", \"lively4-stable\"]\n  }\n  \n  async getHeaders() {\n    return new Headers({\n      \"gitusername\":          this.get(\"#gitusername\").value,\n      \"gitpassword\":          await this.loadValue(\"githubToken\"), \n      \"gitemail\":             this.get(\"#gitemail\").value,\n      \"gitrepositoryurl\":     this.get(\"#gitrepositoryurl\").value,\n      \"gitrepository\":        this.getRepository(),\n      \"gitrepositorybranch\":  this.get(\"#gitrepositorybranch\").value,\n      \"gitcommitmessage\":     this.get(\"#gitcommitmessage\").value,\n      \"dryrun\":               this.get(\"#dryrun\").checked\n    })\n  }\n  \n  defaultServerURL() {\n    return lively4url.match(/(.*)\\/([^\\/]+$)/)[1]\n  }\n\n  getServerURL() {\n    return this.getAttribute(\"serverurl\") || this.defaultServerURL()\n  }\n\n  setServerURL(url) {\n    this.setAttribute(\"serverurl\", url)\n    this.updateWindowTitle()\n    this.updateRepositoryList()\n    this.updateServerURL()\n  }\n  \n  setRepository(name) {\n     this.get(\"#gitrepository\").value = name\n  }\n  \n  getRepository() {\n     return this.get(\"#gitrepository\").value\n  }\n  \n  getBranch() {\n     return this.get(\"#gitrepositorybranch\").value.replace(/^ */,\"\")\n  }\n\n\n  async getGitRepositoryNames() {\n    var json = await lively.files.statFile(this.getServerURL()).then( JSON.parse)\n    if (!json || !json.contents) return []\n    return json.contents.filter(ea => ea.type == \"directory\").map(ea => ea.name)\n  }\n  \n  \n  /*MD ## Helper MD*/\n  \n  async storeValue(key, value) {\n    return  lively.focalStorage.setItem(this.storagePrefix + key, value)\n  }\n  \n  async loadValue(key) {\n    return lively.focalStorage.getItem(this.storagePrefix + key)\n  }\n  \n  linkifyFiles(htmlString) {\n    var base = this.getServerURL() + \"/\" + this.getRepository() + \"/\"\n    return htmlString\n      // .replace(/(<span style=\"color:#A00\">(?:deleted\\: *)?)([^<]*)(<\\/span>)/g, (m,a,b,c) => \n      //     `${a}<a onclick=\"event.preventDefault(); fetch(this.href)\" href=\"edit://${b}\">${b}</a>${c}`)\n      .replace(/(modified: *)([a-zA-Z0-9\\-_/ .]*)/g, (m,a,b) => \n          `${a}<a onclick=\"event.preventDefault(); lively.openBrowser(this.href,true)\" href=\"${base + b}\">${b}</a>`)\n      .replace(/((?:\\+\\+\\+\\s*b\\/)|(?:\\-\\-\\- a\\/))([a-zA-Z-_0-9/ .]*)/g, (m,a,b) => \n          `${a}<a onclick=\"event.preventDefault(); lively.openBrowser(this.href,true)\" href=\"${base + b}\">${b}</a>`)\n// \n  }\n  \n  /*MD ## Events MD*/\n  \n  onSyncButton() {\n    this.gitControl(\"status\").then((status) => { if (!status.match(\"AUTO-COMMIT-\")) {\n        this.sync()\n        // lively.notify(\"sync directly\")\n      } else {\n        if (window.confirm(\"Contains auto commits. Forgot to squash? Push them anyway? \")) {\n          this.sync()\n          // lively.notify(\"sync anyway\")\n        } else {\n          // lively.notify(\"sync canceled\")\n        }\n      }\n    })\n  }\n\n\n\n  async onLoginButton() {\n    window.lively4github = null // fetch will getg new auth info\n    this.clearLog()\n    if (await this.loadValue(\"githubToken\")) { \n      this.logout() \n    } else { \n      this.login()\n    }\n  }\n\n  getProtectedRepositories() {\n    return [\"lively4-jens\", \"lively4-core\"]\n  }\n  \n  onBranchButton() {\n    if (this.getProtectedRepositories().includes(this.getRepository())) {\n      return lively.warn(\"You are not allowed to branch on \" + this.getRepository())\n    }    \n    this.gitControl(\"branch\")  \n  }\n\n  onStatusButton() {\n    this.gitControl(\"status\")  \n  }\n\n  onResetHardButton() {\n    \n    if (window.confirm(\"Do you want revert all local commits and reset to your current branch?\")) {\n      this.gitControl(\"reset-hard\");\n    }\n  }\n  \n  onDiffButton() {\n    this.get(\"#log\").setAttribute('mode', \"text/x-diff\")\n    // text/x-diff\n    \n    this.gitControl(\"diff\")  \n  }\n\n  async onCloneButton(){\n    if (window.confirm(\"Do you want to clone into \" + \n        this.get(\"#gitrepository\").value)) {\n      this.get(\"#cloneButton\").disabled= true\n      await this.gitControl(\"clone\")\n      this.updateContextSensitiveButtons()\n      this.updateRepositoryList()\n    }\n  }\n\n  onNpmInstallButton() {\n    this.gitControl(\"npminstall\")\n  }\n\n  onNpmTestButton() {\n    this.gitControl(\"npmtest\")\n  }\n\n\n  async onResolveButton() {\n    if (await lively.confirm(\"DANGER! Do you want to FORCE a resolve with a hammer? Please consider, going to all files and solve the conflict through editing there! This is not the button you want to use.\")) {\n        this.gitControl(\"resolve\")\n    }\n  }\n\n  onChangelogButton() {\n   this.gitControl(\"graph\");\n  }\n  \n  onChangesgraphButton() {\n    lively.openMarkdown(lively4url + \"/doc/files/changesgraph.md\", \n      \"Change Graph\", {url: this.getServerURL() + \"/\" + this.getRepository() + \"/\"})\n  }\n  \n  onCommitButton() {\n    // return lively.notify(\"Commit is not implemented yet\")  \n    this.gitControl(\"commit\");\n  }\n  \n  onDeleteButton() {\n    if (window.confirm(\"Do you want to delete \" + this.get(\"#gitrepository\").value + \" repository?\")) {\n      this.gitControl(\"delete\");\n    }\n  }\n  \n  async onMergeButton() {\n    if (this.getProtectedRepositories().includes(this.getRepository())) {\n      return lively.warn(\"You are not allowed to merge on \" + this.getRepository())\n    }  \n    if (await lively.confirm(\"Do you want to merge \"\n      + this.get(\"#gitrepositorybranch\").value \n      +\" into \" + this.get(\"#gitrepository\").value \n      + \" repository?<br><b style='color:red'>DANGER: Do not 'Squash' commit before a new 'Sync'</b>\")) {\n      this.gitControl(\"merge\");\n    }\n  }\n  \n  onSquashButton() {\n    this.gitControl(\"squash\");\n  }\n\n  async onResetButton(){\n    const answer = await lively.confirm(\"This will hard reset to the current remote working index.\");\n    if(answer){\n      this.gitControl(\"reset\")\n    }\n  }\n  \n  onGitrepositoryInputChange(evt) {    \n    var value = this.getRepository()\n    lively.notify(\"input changed:\" + value)\n    this.setAttribute(\"gitrepository\", value)\n  }\n  \n  async onServerUrlInputChange(evt) {    \n    var input = this.get(\"#serverUrl\")\n    var url = input.value\n    \n    try {\n      var stats = await fetch(url, {\n        method: \"OPTIONS\"\n      }).then(r => r.json())\n    } catch(e) {\n      \n    }\n    \n    // #TODO we could inform in the server that this is a proper base directory....\n    if (stats && stats.type == \"directory\") {\n      input.style.border = \"\"\n      this.setServerURL(url)\n    } else {\n      input.style.border = \"2px dashed red\"\n    }\n    \n    lively.notify(\"server url: \" + url)\n    \n    \n    \n    // var value = this.getRepository()\n    // lively.notify(\"input changed:\" + value)\n    // this.setAttribute(\"gitrepository\", value)\n  }\n  \n  async onGitrepositoryChanged(value) {\n    this.updateContextSensitiveButtons()\n  }\n  \n  /*MD ## Update UI MD*/\n  \n  async updateRepositoryList() {\n    var list = await this.getGitRepositoryNames()\n    this.get(\"#gitrepositories\").innerHTML = \n      list.map(ea => \"<option>\" + ea).join(\"\\n\")\n  }\n\n  async updateBranchesList() {\n    var branches = await this.gitControl(\"branches\", ()=>{})\n    branches = branches.split(\"\\n\")\n    var currentRegex = /^ *\\*/\n    var currentBranch = branches.find(ea => ea.match(currentRegex));\n    if(!currentBranch) {\n      return\n    }\n    currentBranch = currentBranch.replace(currentRegex,\"\")\n    this.get(\"#gitrepositorybranch\").value = currentBranch\n    \n    var remoteRegEx = /^remotes\\/origin\\//\n    branches = branches\n      .map(ea => ea.replace(/^\\*? */,\"\")) // trim\n      .filter(ea => ea.match(remoteRegEx))\n      .filter(ea => ! ea.match(\"HEAD \"))\n      .map(ea => ea.replace(remoteRegEx,\"\"))\n    this.get(\"#gitbranches\").innerHTML = branches.map(ea => \"<option>\" + ea).join(\"\\n\")\n    // console.log(\"branches: \" + branches)\n  }\n\n\n  \n  async updateContextSensitiveButtons() {\n    \n    var repository = this.get(\"#gitrepository\").value\n    var list = await this.getGitRepositoryNames()\n    var exists = list.includes(repository);\n    \n    // console.log(\"delete \" + this.get(\"#deleteButton\").disabled)\n\n    if (exists) {\n      \n      await this.updateUpstreamURL()\n      await this.updateBranchesList() \n    }\n\n    this.shadowRoot.querySelectorAll(\".repo\").forEach(ea => \n      ea.disabled= !this.loggedin || !exists)\n\n    this.shadowRoot.querySelectorAll(\".branch\").forEach(ea => \n      ea.disabled= !this.loggedin)\n      \n    this.shadowRoot.querySelectorAll(\".clone\").forEach(ea => \n      ea.disabled= !this.loggedin || exists)\n      \n    this.shadowRoot.querySelectorAll(\".login\").forEach(ea => \n      ea.disabled= this.loggedin)\n\n    if (this.repositoryBlacklist.includes(repository))\n      this.get(\"#deleteButton\").disabled = true\n  }\n   \n  updateServerURL() {\n    this.get(\"#serverUrl\").value = this.getServerURL()\n  }\n  \n  async updateUpstreamURL() {\n    var url = await this.gitControl(\"remoteurl\")\n    url = url.replace(/\\n/,\"\")\n    this.get(\"#gitrepositoryurl\").value = url\n  }\n  \n  updateWindowTitle() {\n    var serverURL = this.getServerURL()\n    this.windowTitle = \"GitHub Sync \" + ((serverURL == this.defaultServerURL()) ? \"\" : serverURL );    \n  }\n  \n  async updateLoginStatus() {\n    if (window.__karma__) return; // no lively4-server active\n    \n    await this.loadCredentials()\n    \n    await this.updateContextSensitiveButtons();\n    await this.updateRepositoryList();\n  }\n  \n    // #TODO into Morph or Tool\n  clearLog(s) {\n    this.get(\"#log\").innerHTML = \"\"\n    // var editor= this.get(\"#log\").editor;\n    // if (editor) editor.setValue(\"\");\n  }\n  \n\n}\n"}